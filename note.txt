服务器向浏览器返回代码时候，浏览器解析需要经过三大步骤：DOM构造（DOM树，节点）、布局（将节点放到哪个位置）、绘制页面


所有的vue组件都是一个vue实例


类似于vue这种框架可以减少不必要的DOM操作，提高渲染效率


事件修饰符：
.stop --阻止触发事件的冒泡
.prevent --阻止默认行为，不是把用.prevent这个行为阻止，而是阻止这个标签的其他行为
.capture  --添加事件捕获模式，可以改变由内向外冒泡，改变一下顺序


过滤器：
vue.js 允许自定义过滤器，可被用作一些常见的文本格式化，过滤器可以用在两个地方：插值表达式和v-bind表达式
过滤器调用的格式：{{name | 过滤器的名称}} 






重要的标签：
<a>
<a> 标签定义超链接，用于从一张页面链接到另一张页面。
<a> 元素最重要的属性是 href 属性，它指示链接的目标。

<style>
<style> 标签用于为 HTML 文档定义样式信息。
在 style 中，您可以规定在浏览器中如何呈现 HTML 文档。
style 元素位于 head 部分中。

<div>
<div> 可定义文档中的分区或节（division/section）。
<div> 标签可以把文档分割为独立的、不同的部分。它可以用作严格的组织工具，并且不使用任何格式与其关联。
如果用 id 或 class 来标记 <div>，那么该标签的作用会变得更加有效。


常用方法记录：

list.some():

some() 方法用于检测数组中的元素是否满足指定条件（函数提供）。

some() 方法会依次执行数组的每个元素：

如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。
如果没有满足条件的元素，则返回false。


list.splice(index,howmany):
从数组中删除项目，index是数组的索引，howmany是删除数目的数量


